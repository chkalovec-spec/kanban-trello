{"version":3,"sources":["store/Boards/actions.ts","data/index.ts","store/Boards/reducers.ts","store/index.ts","constants/index.ts","store/Boards/selectors.ts","assets/addIcon.svg","assets/closeIcon.svg","components/AddForm/index.tsx","components/Board/index.tsx","components/BoardWrapper/index.tsx","containers/DashBoardContainer.tsx","App.tsx","index.tsx"],"names":["BoardsActionTypes","boardsData","id","generate","title","tasks","text","boardsState","data","boards","produce","draft","action","getBoard","find","i","type","ADD_BOARD","push","payload","ADD_TASK","currentBoard","boardId","REORDER_TASK","sourceId","destinationId","splice","sourceIndex","removed","destinationIndex","sourceBoard","destinationBoard","rootReducer","combineReducers","store","createStore","window","addFormConstants","selectBoards","AddForm","empty","useState","isShowForm","setIsShowForm","textAreaValue","setTextAreaValue","dispatch","useDispatch","showFormHandler","useCallback","onAddHandler","addTask","onChangeHandler","e","target","value","onKeyPressHandler","charCode","ctrlKey","className","placeholder","EMPTY_PLACEHOLDER","PLACEHOLDER","onChange","onKeyPress","autoFocus","onClick","disabled","ACTIVE_EMPTY_TITLE","ACTIVE_TITLE","src","closeIcon","alt","addIcon","EMPTY_TITLE","TITLE","Board","dropProvided","map","index","draggableId","provided","snapshot","ref","innerRef","draggableProps","dragHandleProps","isDragging","BoardWrapper","onDragEnd","droppableId","droppableProps","Fragment","DashBoardContainer","useSelector","reorderTasksHandler","destination","source","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.695a6c8e.chunk.js","sourcesContent":["export enum BoardsActionTypes {\r\n  ADD_BOARD = 'ADD_BOARD',\r\n  ADD_TASK = 'ADD_TASK',\r\n  REORDER_TASK = 'REORDER_TASK',\r\n}\r\n\r\nexport type AddBoardActionType = {\r\n  type: BoardsActionTypes.ADD_BOARD\r\n  payload: string\r\n}\r\n\r\nexport type AddTaskType = {\r\n  type: BoardsActionTypes.ADD_TASK\r\n  payload: {\r\n    boardId: string\r\n    text: string\r\n  }\r\n}\r\n\r\nexport type ReorderTaskType = {\r\n  type: BoardsActionTypes.REORDER_TASK\r\n  payload: {\r\n    destinationId: string\r\n    destinationIndex: number\r\n    sourceId: string\r\n    sourceIndex: number\r\n  }\r\n}\r\n\r\nexport const addBoard = (payload: AddBoardActionType['payload']): AddBoardActionType => ({\r\n  type: BoardsActionTypes.ADD_BOARD,\r\n  payload,\r\n})\r\n\r\nexport const addTask = (payload: AddTaskType['payload']): AddTaskType => ({\r\n  type: BoardsActionTypes.ADD_TASK,\r\n  payload,\r\n})\r\n\r\nexport const reorderTask = (payload: ReorderTaskType['payload']): ReorderTaskType => ({\r\n  type: BoardsActionTypes.REORDER_TASK,\r\n  payload,\r\n})\r\n\r\nexport type BoardsActions = AddBoardActionType | AddTaskType | ReorderTaskType\r\n","import generate from 'shortid'\r\nimport { DataType } from './types'\r\n\r\nexport const boardsData: DataType = [\r\n  {\r\n    id: generate(),\r\n    title: '–ü–ª–∞–Ω—ã –Ω–∞ –º–µ—Å—è—Ü',\r\n    tasks: [\r\n      {\r\n        id: generate(),\r\n        text: '–ü—Ä–æ–π—Ç–∏ –∫—É—Ä—Å –ø–æ React',\r\n      },\r\n      {\r\n        id: generate(),\r\n        text: '–ü—Ä–æ–¥—É–º–∞—Ç—å –∏–¥–µ—é –±—Ä–µ–Ω–¥–∞',\r\n      },\r\n      {\r\n        id: generate(),\r\n        text: '–î–∏–∑–∞–π–Ω –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞',\r\n      },\r\n      {\r\n        id: generate(),\r\n        text: '–û—Ç–º–µ—Ç–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è',\r\n      },\r\n      {\r\n        id: generate(),\r\n        text: '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å—ã –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞, —á—Ç–æ–±—ã —É–µ—Ö–∞—Ç—å –∂–∏—Ç—å –≤ –õ–æ–Ω–¥–æ–Ω',\r\n      },\r\n      {\r\n        id: generate(),\r\n        text: '–°–¥–µ–ª–∞—Ç—å –±–µ–∫–µ–Ω–¥ —Å–≤–æ–µ–≥–æ —Å–∞–π—Ç–∞ –Ω–∞ node.js',\r\n      },\r\n      {\r\n        id: generate(),\r\n        text:\r\n          '–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–π –∏ –±–æ–≥–∞—Ç—ã–π –æ–ø—ã—Ç —Å–ª–æ–∂–∏–≤—à–∞—è—Å—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤–ª–µ—á–µ—Ç –∑–∞ —Å–æ–±–æ–π –ø—Ä–æ—Ü–µ—Å—Å –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –∏ –º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è.',\r\n      },\r\n      {\r\n        id: generate(),\r\n        text: '–°–æ–±—Ä–∞—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ',\r\n      },\r\n      {\r\n        id: generate(),\r\n        text: '–ù–∞–ø–∏—Å–∞—Ç—å –ø–µ—Ä–≤—É—é —Å—Ç–∞—Ç—å—é –≤ –±–ª–æ–≥',\r\n      },\r\n      {\r\n        id: generate(),\r\n        text:\r\n          '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –º–æ—Ç–æ—à–∫–æ–ª—É. –•–æ—Ç—è –Ω–µ–º–Ω–æ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≤–∞—Ç–æ, –∫–æ–Ω–µ—á–Ω–æ. –î—Ä—É–∑—å—è –∏ —Ä–æ–¥–∏—Ç–µ–ª–∏ –ø—Ä–æ—Ç–∏–≤, –Ω–æ –æ—á–µ–Ω—å —Ö–æ—á–µ—Ç—Å—è. –ù–æ –∫–æ–≥–æ —è –æ–±–º–∞–Ω—ã–≤–∞—é, —É–∂–µ 2 –≥–æ–¥–∞ —Ä–µ—à–∞—é—Å—å –Ω–∞ —ç—Ç–æ—Ç —à–∞–≥ üò¢ –ï—â–µ –∏ –¥—Ä—É–∑—å—è –±—É–¥—É—Ç —Ö—Ä—É—Å—Ç–∏–∫–æ–º –Ω–∞–∑—ã–≤–∞—Ç—å. –í –æ–±—â–µ–º, —Ö–æ—Ç—è –±—ã –ø–æ–¥—É–º–∞—Ç—å –Ω–∞–¥ —ç—Ç–∏–º.',\r\n      },\r\n      {\r\n        id: generate(),\r\n        text: '–ù–µ—Ç, —è —Å–µ—Ä—å–µ–∑–Ω—ã–π —á–µ–ª–æ–≤–µ–∫, –∏–¥—É –≤ –º–æ—Ç–æ—à–∫–æ–ª—É. –ó–∞–ø–∏—Å—ã–≤–∞—é—Å—å!',\r\n      },\r\n      {\r\n        id: generate(),\r\n        text: '–ù–µ –∑–∞–±—ã—Ç—å –∑–æ–Ω—Ç–∏–∫',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    id: generate(),\r\n    title: '–ü–ª–∞–Ω—ã –Ω–∞ –¥–µ–Ω—å',\r\n    tasks: [\r\n      {\r\n        id: generate(),\r\n        text: '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å –ø–æ React',\r\n      },\r\n      {\r\n        id: generate(),\r\n        text: '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç–∏—Ä –Ω–∞ —Å—É–±–±–æ—Ç—É',\r\n      },\r\n      {\r\n        id: generate(),\r\n        text: '–ù–∞–∫–∏–¥–∞—Ç—å —Ç–µ–º –¥–ª—è —Å—Ç–∞—Ç–µ–π –≤ –±–ª–æ–≥',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    id: generate(),\r\n    title: '–ò—Ç–æ–≥–∏',\r\n    tasks: [],\r\n  },\r\n]\r\n","import { BoardType, DataType } from 'data/types'\r\nimport produce, { Draft } from 'immer'\r\n\r\nimport { boardsData } from 'data'\r\nimport { BoardsActions, BoardsActionTypes } from './actions'\r\nimport { generate } from 'shortid'\r\n\r\nexport interface BoardsStateType {\r\n  data: DataType\r\n}\r\n\r\nexport const boardsState: BoardsStateType = {\r\n  data: boardsData,\r\n}\r\n\r\nexport const boards = produce(\r\n  (draft: Draft<BoardsStateType>, action: BoardsActions): BoardsStateType => {\r\n    const getBoard = (id: string): BoardType => {\r\n      return draft.data.find(i => i.id === id)!\r\n    }\r\n\r\n    switch (action.type) {\r\n      case BoardsActionTypes.ADD_BOARD: {\r\n        draft.data.push({\r\n          id: generate(),\r\n          title: action.payload,\r\n          tasks: [],\r\n        })\r\n        return draft\r\n      }\r\n      case BoardsActionTypes.ADD_TASK: {\r\n        const currentBoard = getBoard(action.payload.boardId)\r\n        if (currentBoard) {\r\n          currentBoard.tasks.push({\r\n            id: generate(),\r\n            text: action.payload.text,\r\n          })\r\n        }\r\n        return draft\r\n      }\r\n      case BoardsActionTypes.REORDER_TASK: {\r\n        if (action.payload.sourceId === action.payload.destinationId) {\r\n          const currentBoard = getBoard(action.payload.sourceId)\r\n          if (currentBoard) {\r\n            const [removed] = currentBoard.tasks.splice(+action.payload.sourceIndex, 1)\r\n            currentBoard.tasks.splice(action.payload.destinationIndex, 0, removed)\r\n          }\r\n          return draft\r\n        } else {\r\n          const sourceBoard = getBoard(action.payload.sourceId)\r\n          const destinationBoard = getBoard(action.payload.destinationId)\r\n          if (sourceBoard && destinationBoard) {\r\n            const [removed] = sourceBoard.tasks.splice(+action.payload.sourceIndex, 1)\r\n            destinationBoard.tasks.splice(action.payload.destinationIndex, 0, removed)\r\n          }\r\n\r\n          return draft\r\n        }\r\n      }\r\n      default:\r\n        return draft\r\n    }\r\n  },\r\n  boardsState\r\n)\r\n","import { combineReducers, createStore } from 'redux'\r\nimport { boards } from './Boards/reducers'\r\n\r\nconst rootReducer = combineReducers({ boards })\r\nexport type RootState = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer)\r\n;(window as any).store = store\r\n","export enum addFormConstants {\r\n  TITLE = '–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω—É –∫–∞—Ä—Ç–æ—á–∫—É',\r\n  EMPTY_TITLE = '–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω—É –∫–æ–ª–æ–Ω–∫—É',\r\n  PLACEHOLDER = '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏',\r\n  EMPTY_PLACEHOLDER = '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏',\r\n  ACTIVE_TITLE = '–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É',\r\n  ACTIVE_EMPTY_TITLE = '–î–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É',\r\n}\r\n","import { RootState } from 'store'\r\n\r\nexport const selectBoards = ({ boards }: RootState) => boards.data\r\n","export default __webpack_public_path__ + \"static/media/addIcon.0bbf1711.svg\";","export default __webpack_public_path__ + \"static/media/closeIcon.4ac10f93.svg\";","import { Dispatch, useCallback, useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\n\r\nimport { addBoard, addTask, BoardsActions } from 'store/Boards/actions'\r\n\r\nimport { addFormConstants } from '../../constants'\r\n\r\nimport addIcon from 'assets/addIcon.svg'\r\nimport closeIcon from 'assets/closeIcon.svg'\r\nimport './style.scss'\r\n\r\ntype AddFormProps = {\r\n  empty?: boolean\r\n  boardId?: string\r\n}\r\n\r\nexport const AddForm: React.FC<AddFormProps> = ({ empty, boardId }) => {\r\n  const [isShowForm, setIsShowForm] = useState<boolean>(false)\r\n  const [textAreaValue, setTextAreaValue] = useState<string>('')\r\n  const dispatch = useDispatch<Dispatch<BoardsActions>>()\r\n\r\n  const showFormHandler = useCallback(() => {\r\n    setIsShowForm(!isShowForm)\r\n    setTextAreaValue('')\r\n  }, [isShowForm])\r\n\r\n  const onAddHandler = useCallback(() => {\r\n    if (empty) dispatch(addBoard(textAreaValue))\r\n    if (boardId) dispatch(addTask({ boardId, text: textAreaValue }))\r\n    showFormHandler()\r\n  }, [empty, textAreaValue, boardId, showFormHandler, dispatch])\r\n\r\n  const onChangeHandler = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n    if (e.target.value) setTextAreaValue(e.target.value)\r\n  }, [])\r\n\r\n  const onKeyPressHandler = useCallback(\r\n    (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\r\n      if (e.charCode === 13 && e.ctrlKey) {\r\n        onAddHandler()\r\n      }\r\n    },\r\n    [onAddHandler]\r\n  )\r\n\r\n  return (\r\n    <>\r\n      {isShowForm ? (\r\n        <div className='add-form'>\r\n          <textarea\r\n            className='textarea add-form__textarea'\r\n            placeholder={empty ? addFormConstants.EMPTY_PLACEHOLDER : addFormConstants.PLACEHOLDER}\r\n            value={textAreaValue}\r\n            onChange={onChangeHandler}\r\n            onKeyPress={onKeyPressHandler}\r\n            autoFocus\r\n          />\r\n          <div className='add-panel'>\r\n            <button\r\n              className='add-panel__title btn'\r\n              onClick={onAddHandler}\r\n              disabled={!textAreaValue}\r\n            >\r\n              {empty ? addFormConstants.ACTIVE_EMPTY_TITLE : addFormConstants.ACTIVE_TITLE}\r\n            </button>\r\n            <img className='add-panel__icon' src={closeIcon} alt='add' onClick={showFormHandler} />\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div className='add-btn' onClick={showFormHandler}>\r\n          <img className='add-btn__icon' src={addIcon} alt='add' />\r\n          <button className='add-btn__title btn'>\r\n            {empty ? addFormConstants.EMPTY_TITLE : addFormConstants.TITLE}\r\n          </button>\r\n        </div>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Draggable, DroppableProvided } from 'react-beautiful-dnd'\r\n\r\nimport { TaskType } from 'data/types'\r\nimport './style.scss'\r\n\r\ntype TasksPropsType = {\r\n  title: string\r\n  tasks: TaskType[]\r\n  boardId: string\r\n  dropProvided: DroppableProvided\r\n}\r\n\r\nexport const Board: React.FC<TasksPropsType> = ({ title, tasks, dropProvided }) => {\r\n  return (\r\n    <>\r\n      <p className='board-title'>{title}</p>\r\n      <div className='board-tasks'>\r\n        {tasks.map(({ id, text }, index) => (\r\n          <Draggable key={id} draggableId={id} index={index}>\r\n            {(provided, snapshot) => (\r\n              <div\r\n                key={id}\r\n                ref={provided.innerRef}\r\n                {...provided.draggableProps}\r\n                {...provided.dragHandleProps}\r\n                className={\r\n                  snapshot.isDragging ? 'board-tasks__item--dragging' : 'board-tasks__item'\r\n                }\r\n              >\r\n                {text}\r\n              </div>\r\n            )}\r\n          </Draggable>\r\n        ))}\r\n        {dropProvided.placeholder}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { DragDropContext, Droppable, DropResult } from 'react-beautiful-dnd'\r\n\r\nimport { AddForm } from 'components/AddForm'\r\nimport { Board } from 'components/Board'\r\n\r\nimport { DataType } from 'data/types'\r\nimport './style.scss'\r\n\r\ntype BoardWrapperType = {\r\n  boards: DataType\r\n  onDragEnd: (result: DropResult) => void\r\n}\r\n\r\nexport const BoardWrapper: React.FC<BoardWrapperType> = ({ boards, onDragEnd }) => {\r\n  return (\r\n    <>\r\n      <DragDropContext onDragEnd={onDragEnd}>\r\n        <div className='boards-wrapper'>\r\n          {boards.map(({ id, title, tasks }) => (\r\n            <Droppable droppableId={id} key={id}>\r\n              {provided => (\r\n                <div {...provided.droppableProps} ref={provided.innerRef} className='board'>\r\n                  <React.Fragment>\r\n                    <Board tasks={tasks} title={title} boardId={id} dropProvided={provided} />\r\n                    <AddForm boardId={id} />\r\n                  </React.Fragment>\r\n                </div>\r\n              )}\r\n            </Droppable>\r\n          ))}\r\n          <div className='board'>\r\n            <AddForm empty />\r\n          </div>\r\n        </div>\r\n      </DragDropContext>\r\n    </>\r\n  )\r\n}\r\n","import React, { Dispatch, useCallback } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { DropResult } from 'react-beautiful-dnd'\r\n\r\nimport { selectBoards } from 'store/Boards/selectors'\r\nimport { reorderTask, ReorderTaskType } from 'store/Boards/actions'\r\n\r\nimport { BoardWrapper } from 'components/BoardWrapper'\r\n\r\nexport const DashBoardContainer: React.FC = () => {\r\n  const boards = useSelector(selectBoards)\r\n  const dispatch = useDispatch<Dispatch<ReorderTaskType>>()\r\n\r\n  const reorderTasksHandler = useCallback(({ destination, source }: DropResult) => {\r\n    if (destination && source) {\r\n      dispatch(\r\n        reorderTask({\r\n          destinationId: destination.droppableId,\r\n          destinationIndex: destination.index,\r\n          sourceId: source.droppableId,\r\n          sourceIndex: source.index,\r\n        })\r\n      )\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <BoardWrapper boards={boards} onDragEnd={reorderTasksHandler}></BoardWrapper>\r\n    </>\r\n  )\r\n}\r\n","import { DashBoardContainer } from 'containers/DashBoardContainer'\n\nimport './App.scss'\n\nfunction App() {\n  return (\n    <>\n      <div className='app-wrapper'>\n        <DashBoardContainer />\n      </div>\n    </>\n  )\n}\n\nexport default App\n","import ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\n\nimport { store } from 'store'\n\nimport App from './App'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}